% read_corner_parameters.m  - a function for reading in project parameters for
% the corner finding program 
% See cornerparams.dat for a sample input file and description of what each
% of the parameters are.
% Usage:
%   [filename,S,N,D,M] = read_corner_parameters('cornerparams.dat');
%

% ~~~QUESTION 1~~~



function [filename,S,N,D,M] = read_corner_parameters(paramfilename)
clc;
clear;


fp = fopen('cornerparams.dat','r');

%Note: this is a general framework for reading parameters from a data file
params = {};
paramtypes = {'%s','%f','%d','%d','%d'};
paramnames = {'filename','S','N','D','M'};

for i=1:length(paramtypes)
    line = fgets(fp);

    %ignore comment lines
    while(line(1)=='%')    
        line = fgets(fp);
    end
    command = sprintf('%s = sscanf(line,''%s'');',paramnames{i},paramtypes{i});
    eval(command);
end

fclose(fp);



% ~~~QUESTION 2~~~

imageData = imread(filename);
imageData = im2double(rgb2gray(imageData));


% ~~~QUESTION 3~~~

% get kernel size
kernelSize = 2 * ceil(3 * S) + 1;

% create kernel
x = -floor(kernelSize/2):floor(kernelSize/2);
gKernel = exp(-x.^2 / (2 * S^2));

% normalize before convolving
gKernel = gKernel / sum(gKernel); 

% conv along rows then cols
smoothedRow = conv2(gKernel, 1, imageData, 'same');
smoothedImage = conv2(1, gKernel', smoothedRow, 'same');


% ~~~QUESTION 4~~~

% gradient() in Matlab uses central difference 
[Gx, Gy] = gradient(smoothedImage);


% ~~~QUESTION 5~~~

% ~~~~~~part a~~~~
GxGx = Gx .* Gx;
GxGy = Gx .* Gy;
GyGy = Gy .* Gy;

% ~~~~~~part b~~~~
box_filter = ones(N, N);

Sx2 = conv2(GxGx, box_filter, 'same');
Sxy = conv2(GxGy, box_filter, 'same');
Sy2 = conv2(GyGy, box_filter, 'same');

% ~~~~~~part c~~~~
[rows, cols] = size(imageData);
H = zeros(rows, cols, 2, 2);
for x = 1 : rows
    for y = 1 : cols
        H(x, y, 1, 1) = Sx2(x, y);
        H(x, y, 1, 2) = Sxy(x, y);
        H(x, y, 2, 1) = Sxy(x, y);
        H(x, y, 2, 2) = Sy2(x, y);
    end
end

% ~~~~~~part d~~~~
R = zeros(rows, cols);
for x = 1:rows
    for y = 1:cols

        % extract H at each pixel
        H11 = H(x, y, 1, 1);
        H12 = H(x, y, 1, 2);
        H21 = H(x, y, 2, 1);
        H22 = H(x, y, 2, 2);

        % calculate determinant and trace
        det = (H11 * H22) - (H12 * H21);
        trace = H11 + H22;

        % compute R
        k = 0.05;
        R(x, y) = det - k * trace^2;
    end
end

% ~~~~~QUESTION 6~~~~

goodCorners = zeros(M, 3);

R_copy = R; % copy R to avoid editing og

for i = 1:M
    % Find the max R value and its coordinates
    [maxVal, maxInd] = max(R_copy(:));
    [y, x] = ind2sub(size(R_copy), maxInd);  % Correctly update y and x
    
    % Save the corner in the list
    goodCorners(i, :) = [maxVal, y, x];

    % Set values within distance D of the corner to zero (suppression)
    yRange = max(1, y-D):min(rows, y+D);
    xRange = max(1, x-D):min(cols, x+D);
    R_copy(yRange, xRange) = 0;
end

% ~~~~~QUESTION 7~~~~
% Define the filename for the output
outputFilename = 'corner_features.txt';

% Open the file for writing
fileID = fopen(outputFilename, 'w');

% Check if the file was successfully opened
if fileID == -1
    error('Cannot open file for writing.');
end

% Write the number of corners found to the first line
fprintf(fileID, '%d\n', M);

% Loop through each corner and write its details
for i = 1:M
    fprintf(fileID, '%.6f %d %d\n', goodCorners(i, 1), goodCorners(i, 2), goodCorners(i, 3));
end

% Close the file
fclose(fileID);

% Display a confirmation message
disp(['Corner features successfully written to ', outputFilename]);

% Display Original Image
figure; 
imshow(imageData); 
title('Original Image');

% Display Harris R Image
figure; 
imshow(R, []);  % The [] scales the display based on the min/max values of R
title('Harris R Image');

% Display Top N Corners on the Original Image
figure; 
imshow(imageData); 
hold on;
for i = 1:size(goodCorners, 1)
    % Draw a red box around each corner
    rectangle('Position', [goodCorners(i,3)-3, goodCorners(i,2)-3, 7, 7], 'EdgeColor', 'r', 'LineWidth', 2);
end
title('Top N Corners Found');

% Display Gradient Gx Image
figure; 
imshow(Gx, []); 
title('Gradient Gx Image');

% Display Gradient Gy Image
% figure; 
% imshow(Gy, []); 
% title('Gradient Gy Image');



return
